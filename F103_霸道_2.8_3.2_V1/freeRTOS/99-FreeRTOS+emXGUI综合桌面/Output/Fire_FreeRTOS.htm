<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\Fire_FreeRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\Fire_FreeRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jul 06 09:33:46 2019
<BR><P>
<H3>Maximum Stack Usage =       1272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GUI_Thread_Entry &rArr; GUI_Startup &rArr; GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[33c]">_SetWindowClipFlag</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33c]">_SetWindowClipFlag</a><BR>
 <LI><a href="#[300]">GUI_PaintHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[300]">GUI_PaintHandler</a><BR>
 <LI><a href="#[33d]">_RedrawWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33d]">_RedrawWindow</a><BR>
 <LI><a href="#[357]">_SendMessage_WM_SIZE_AllChild</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">_SendMessage_WM_SIZE_AllChild</a><BR>
 <LI><a href="#[356]">_SendMessage_WM_MOVE_AllChild</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[356]">_SendMessage_WM_MOVE_AllChild</a><BR>
 <LI><a href="#[354]">_OffsetWindowRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[354]">_OffsetWindowRect</a><BR>
 <LI><a href="#[17c]">disk_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17c]">disk_write</a><BR>
 <LI><a href="#[17a]">disk_read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17a]">disk_read</a><BR>
 <LI><a href="#[326]">_GetWindowFromPoint</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[326]">_GetWindowFromPoint</a><BR>
 <LI><a href="#[2cf]">DestroyWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2cf]">DestroyWindow</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a9]">GL8_copy_bits</a> from gl_mem_8bpp.o(i.GL8_copy_bits) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b6]">GL8_draw_bitmap_AL1</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL1) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b7]">GL8_draw_bitmap_AL2</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL2) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b8]">GL8_draw_bitmap_AL4</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL4) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b9]">GL8_draw_bitmap_AL8</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_AL8) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b1]">GL8_draw_bitmap_ARGB1555</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB1555) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b2]">GL8_draw_bitmap_ARGB4444</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB4444) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b5]">GL8_draw_bitmap_ARGB8888</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB8888) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[aa]">GL8_draw_bitmap_LUT1</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT1) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ab]">GL8_draw_bitmap_LUT2</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT2) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ac]">GL8_draw_bitmap_LUT4</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT4) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ad]">GL8_draw_bitmap_LUT8</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT8) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ae]">GL8_draw_bitmap_RGB332</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB332) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[af]">GL8_draw_bitmap_RGB565</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB565) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b3]">GL8_draw_bitmap_RGB888</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB888) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b0]">GL8_draw_bitmap_XRGB1555</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB1555) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[b4]">GL8_draw_bitmap_XRGB8888</a> from gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB8888) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a6]">GL8_draw_hline</a> from gl_mem_8bpp.o(i.GL8_draw_hline) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a7]">GL8_draw_vline</a> from gl_mem_8bpp.o(i.GL8_draw_vline) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a8]">GL8_fill_rect</a> from gl_mem_8bpp.o(i.GL8_fill_rect) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a4]">GL8_get_pixel</a> from gl_mem_8bpp.o(i.GL8_get_pixel) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[bb]">GL8_rotate_bitmap</a> from gl_mem_8bpp.o(i.GL8_rotate_bitmap) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[ba]">GL8_scale_bitmap</a> from gl_mem_8bpp.o(i.GL8_scale_bitmap) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a2]">GL8_set_addr</a> from gl_mem_8bpp.o(i.GL8_set_addr) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a3]">GL8_set_pixel</a> from gl_mem_8bpp.o(i.GL8_set_pixel) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[a5]">GL8_xor_pixel</a> from gl_mem_8bpp.o(i.GL8_xor_pixel) referenced from gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
 <LI><a href="#[49]">GUI_Thread_Entry</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[c2]">GetPoint</a> from ads7843.o(.text) referenced from ads7843.o(.constdata)
 <LI><a href="#[c1]">GetSample</a> from ads7843.o(.text) referenced from ads7843.o(.constdata)
 <LI><a href="#[c0]">GetState</a> from ads7843.o(.text) referenced from ads7843.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bf]">Init</a> from ads7843.o(.text) referenced from ads7843.o(.constdata)
 <LI><a href="#[c3]">LoadCfg</a> from ads7843.o(.text) referenced from ads7843.o(.constdata)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from bsp_sdio_sdcard.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c4]">SaveCfg</a> from ads7843.o(.text) referenced from ads7843.o(.constdata)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bc]">_AA_HLine</a> from gui_aa_core.o(i._AA_HLine) referenced from gui_aa_core.o(i.GUI_AA_Begin)
 <LI><a href="#[d8]">_GetARGB</a> from surface_rgb565.o(i._GetARGB) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[d7]">_GetRGB</a> from surface_rgb565.o(i._GetRGB) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[d6]">_MapARGB</a> from surface_rgb565.o(i._MapARGB) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[d5]">_MapRGB</a> from surface_rgb565.o(i._MapRGB) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[cf]">_MapRGB332</a> from surface_rgb565.o(i._MapRGB332) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[d0]">_MapRGB565</a> from surface_rgb565.o(i._MapRGB565) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[d1]">_MapXRGB1555</a> from surface_rgb565.o(i._MapXRGB1555) referenced 2 times from surface_rgb565.o(.constdata)
 <LI><a href="#[d2]">_MapXRGB4444</a> from surface_rgb565.o(i._MapXRGB4444) referenced 2 times from surface_rgb565.o(.constdata)
 <LI><a href="#[d3]">_MapXRGB8888</a> from surface_rgb565.o(i._MapXRGB8888) referenced 2 times from surface_rgb565.o(.constdata)
 <LI><a href="#[d4]">_ToARGB</a> from surface_rgb565.o(i._ToARGB) referenced from surface_rgb565.o(.constdata)
 <LI><a href="#[57]">__copy_bits</a> from gl_ext_lcd_16bit.o(i.__copy_bits) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[73]">__copy_bits</a> from gl_mem_16bpp.o(i.__copy_bits) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[8f]">__copy_bits</a> from gl_mem_32bpp.o(i.__copy_bits) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c5]">__create_font</a> from gui_font_xft.o(i.__create_font) referenced 2 times from gui_font_xft.o(.constdata)
 <LI><a href="#[c6]">__delete_font</a> from gui_font_xft.o(i.__delete_font) referenced 2 times from gui_font_xft.o(.constdata)
 <LI><a href="#[64]">__draw_bitmap_AL1</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_AL1) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[80]">__draw_bitmap_AL1</a> from gl_mem_16bpp.o(i.__draw_bitmap_AL1) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9c]">__draw_bitmap_AL1</a> from gl_mem_32bpp.o(i.__draw_bitmap_AL1) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[65]">__draw_bitmap_AL2</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_AL2) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[81]">__draw_bitmap_AL2</a> from gl_mem_16bpp.o(i.__draw_bitmap_AL2) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9d]">__draw_bitmap_AL2</a> from gl_mem_32bpp.o(i.__draw_bitmap_AL2) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[66]">__draw_bitmap_AL4</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_AL4) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[82]">__draw_bitmap_AL4</a> from gl_mem_16bpp.o(i.__draw_bitmap_AL4) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9e]">__draw_bitmap_AL4</a> from gl_mem_32bpp.o(i.__draw_bitmap_AL4) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[67]">__draw_bitmap_AL8</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_AL8) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[83]">__draw_bitmap_AL8</a> from gl_mem_16bpp.o(i.__draw_bitmap_AL8) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9f]">__draw_bitmap_AL8</a> from gl_mem_32bpp.o(i.__draw_bitmap_AL8) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[5f]">__draw_bitmap_ARGB1555</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_ARGB1555) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[7b]">__draw_bitmap_ARGB1555</a> from gl_mem_16bpp.o(i.__draw_bitmap_ARGB1555) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[97]">__draw_bitmap_ARGB1555</a> from gl_mem_32bpp.o(i.__draw_bitmap_ARGB1555) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[60]">__draw_bitmap_ARGB4444</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_ARGB4444) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[7c]">__draw_bitmap_ARGB4444</a> from gl_mem_16bpp.o(i.__draw_bitmap_ARGB4444) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[98]">__draw_bitmap_ARGB4444</a> from gl_mem_32bpp.o(i.__draw_bitmap_ARGB4444) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[63]">__draw_bitmap_ARGB8888</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_ARGB8888) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[7f]">__draw_bitmap_ARGB8888</a> from gl_mem_16bpp.o(i.__draw_bitmap_ARGB8888) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9b]">__draw_bitmap_ARGB8888</a> from gl_mem_32bpp.o(i.__draw_bitmap_ARGB8888) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[58]">__draw_bitmap_LUT1</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT1) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[74]">__draw_bitmap_LUT1</a> from gl_mem_16bpp.o(i.__draw_bitmap_LUT1) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[90]">__draw_bitmap_LUT1</a> from gl_mem_32bpp.o(i.__draw_bitmap_LUT1) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[59]">__draw_bitmap_LUT2</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT2) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[75]">__draw_bitmap_LUT2</a> from gl_mem_16bpp.o(i.__draw_bitmap_LUT2) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[91]">__draw_bitmap_LUT2</a> from gl_mem_32bpp.o(i.__draw_bitmap_LUT2) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[5a]">__draw_bitmap_LUT4</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT4) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[76]">__draw_bitmap_LUT4</a> from gl_mem_16bpp.o(i.__draw_bitmap_LUT4) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[92]">__draw_bitmap_LUT4</a> from gl_mem_32bpp.o(i.__draw_bitmap_LUT4) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[5b]">__draw_bitmap_LUT8</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT8) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[77]">__draw_bitmap_LUT8</a> from gl_mem_16bpp.o(i.__draw_bitmap_LUT8) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[93]">__draw_bitmap_LUT8</a> from gl_mem_32bpp.o(i.__draw_bitmap_LUT8) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[5c]">__draw_bitmap_RGB332</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_RGB332) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[78]">__draw_bitmap_RGB332</a> from gl_mem_16bpp.o(i.__draw_bitmap_RGB332) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[94]">__draw_bitmap_RGB332</a> from gl_mem_32bpp.o(i.__draw_bitmap_RGB332) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[5d]">__draw_bitmap_RGB565</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_RGB565) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[79]">__draw_bitmap_RGB565</a> from gl_mem_16bpp.o(i.__draw_bitmap_RGB565) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[95]">__draw_bitmap_RGB565</a> from gl_mem_32bpp.o(i.__draw_bitmap_RGB565) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[61]">__draw_bitmap_RGB888</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_RGB888) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[7d]">__draw_bitmap_RGB888</a> from gl_mem_16bpp.o(i.__draw_bitmap_RGB888) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[99]">__draw_bitmap_RGB888</a> from gl_mem_32bpp.o(i.__draw_bitmap_RGB888) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[5e]">__draw_bitmap_XRGB1555</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_XRGB1555) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[7a]">__draw_bitmap_XRGB1555</a> from gl_mem_16bpp.o(i.__draw_bitmap_XRGB1555) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[96]">__draw_bitmap_XRGB1555</a> from gl_mem_32bpp.o(i.__draw_bitmap_XRGB1555) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[62]">__draw_bitmap_XRGB8888</a> from gl_ext_lcd_16bit.o(i.__draw_bitmap_XRGB8888) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[7e]">__draw_bitmap_XRGB8888</a> from gl_mem_16bpp.o(i.__draw_bitmap_XRGB8888) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[9a]">__draw_bitmap_XRGB8888</a> from gl_mem_32bpp.o(i.__draw_bitmap_XRGB8888) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c9]">__draw_char</a> from gui_font_xft.o(i.__draw_char) referenced 2 times from gui_font_xft.o(.constdata)
 <LI><a href="#[53]">__draw_hline</a> from gl_ext_lcd_16bit.o(i.__draw_hline) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[6f]">__draw_hline</a> from gl_mem_16bpp.o(i.__draw_hline) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[8b]">__draw_hline</a> from gl_mem_32bpp.o(i.__draw_hline) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[54]">__draw_vline</a> from gl_ext_lcd_16bit.o(i.__draw_vline) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[70]">__draw_vline</a> from gl_mem_16bpp.o(i.__draw_vline) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[8c]">__draw_vline</a> from gl_mem_32bpp.o(i.__draw_vline) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[55]">__fill_rect</a> from gl_ext_lcd_16bit.o(i.__fill_rect) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[71]">__fill_rect</a> from gl_mem_16bpp.o(i.__fill_rect) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[8d]">__fill_rect</a> from gl_mem_32bpp.o(i.__fill_rect) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[56]">__fill_rect_ARGB</a> from gl_ext_lcd_16bit.o(i.__fill_rect_ARGB) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[72]">__fill_rect_ARGB</a> from gl_mem_16bpp.o(i.__fill_rect_ARGB) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[8e]">__fill_rect_ARGB</a> from gl_mem_32bpp.o(i.__fill_rect_ARGB) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[c8]">__get_char_info</a> from gui_font_xft.o(i.__get_char_info) referenced 2 times from gui_font_xft.o(.constdata)
 <LI><a href="#[c7]">__get_font_info</a> from gui_font_xft.o(i.__get_font_info) referenced 2 times from gui_font_xft.o(.constdata)
 <LI><a href="#[50]">__get_pixel</a> from gl_ext_lcd_16bit.o(i.__get_pixel) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[6c]">__get_pixel</a> from gl_mem_16bpp.o(i.__get_pixel) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[88]">__get_pixel</a> from gl_mem_32bpp.o(i.__get_pixel) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[69]">__rotate_bitmap</a> from gl_ext_lcd_16bit.o(i.__rotate_bitmap) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[85]">__rotate_bitmap</a> from gl_mem_16bpp.o(i.__rotate_bitmap) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a1]">__rotate_bitmap</a> from gl_mem_32bpp.o(i.__rotate_bitmap) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[68]">__scale_bitmap</a> from gl_ext_lcd_16bit.o(i.__scale_bitmap) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[84]">__scale_bitmap</a> from gl_mem_16bpp.o(i.__scale_bitmap) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[a0]">__scale_bitmap</a> from gl_mem_32bpp.o(i.__scale_bitmap) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[4f]">__set_pixel</a> from gl_ext_lcd_16bit.o(i.__set_pixel) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[6b]">__set_pixel</a> from gl_mem_16bpp.o(i.__set_pixel) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[87]">__set_pixel</a> from gl_mem_32bpp.o(i.__set_pixel) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[52]">__set_pixel_ARGB</a> from gl_ext_lcd_16bit.o(i.__set_pixel_ARGB) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[6e]">__set_pixel_ARGB</a> from gl_mem_16bpp.o(i.__set_pixel_ARGB) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[8a]">__set_pixel_ARGB</a> from gl_mem_32bpp.o(i.__set_pixel_ARGB) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[4e]">__set_pos</a> from gl_ext_lcd_16bit.o(i.__set_pos) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[6a]">__set_pos</a> from gl_mem_16bpp.o(i.__set_pos) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[86]">__set_pos</a> from gl_mem_32bpp.o(i.__set_pos) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[51]">__xor_pixel</a> from gl_ext_lcd_16bit.o(i.__xor_pixel) referenced from gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
 <LI><a href="#[6d]">__xor_pixel</a> from gl_mem_16bpp.o(i.__xor_pixel) referenced from gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
 <LI><a href="#[89]">__xor_pixel</a> from gl_mem_32bpp.o(i.__xor_pixel) referenced from gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
 <LI><a href="#[bd]">_gdHLine</a> from gd_line.o(i._gdHLine) referenced from gui_aa_core.o(i.GUI_AA_End)
 <LI><a href="#[bd]">_gdHLine</a> from gd_line.o(i._gdHLine) referenced from gui_gdi.o(i.InitDC)
 <LI><a href="#[4d]">desktop_proc</a> from gui_desktop.o(.text) referenced from gui_desktop.o(.text)
 <LI><a href="#[4c]">font_read_data_exFlash</a> from gui_font_port.o(.text) referenced from gui_font_port.o(.text)
 <LI><a href="#[be]">fputc</a> from bsp_usart.o(.text) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[274]">gui_app_thread</a> from gui_desktop.o(.text) referenced from gui_desktop.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4a]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[4b]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[37e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[299]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[380]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[381]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[382]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[383]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20d]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[384]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[123]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[385]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[389]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[38a]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>

<P><STRONG><a name="[127]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[38d]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitSRAM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitLCD
</UL>

<P><STRONG><a name="[392]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitSRAM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitLCD
</UL>

<P><STRONG><a name="[397]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>FSMC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[e0]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[f8]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_HardInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitLCD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[3a0]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[3a1]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLed_Control
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[108]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLed_Control
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>

<P><STRONG><a name="[3a4]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[e1]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[3ae]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[120]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[f7]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[3be]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[e4]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[3bf]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>SDIO_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[136]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[3c5]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[11e]"></a>SDIO_SetPowerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[13c]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[14b]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[14c]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[12d]"></a>SDIO_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3c6]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
</UL>

<P><STRONG><a name="[134]"></a>SDIO_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[12f]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3c7]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3c9]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[132]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[3d3]"></a>SDIO_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[e3]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10b]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[e5]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[3d4]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[3d6]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[106]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[3d9]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[3e1]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[e8]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[3e4]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[3e7]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[101]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[3ee]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendArray
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[3f8]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>Debug_USART_Config</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Log_Init
</UL>

<P><STRONG><a name="[fa]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendArray
</UL>

<P><STRONG><a name="[fd]"></a>Usart_SendArray</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[fe]"></a>Usart_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[ff]"></a>Usart_SendHalfWord</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[be]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[100]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>

<P><STRONG><a name="[103]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>

<P><STRONG><a name="[107]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevGetID
</UL>

<P><STRONG><a name="[10a]"></a>SPI_FLASH_Init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_FLASH_Init &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevInit
</UL>

<P><STRONG><a name="[10d]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>

<P><STRONG><a name="[10e]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>

<P><STRONG><a name="[10f]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCfg
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevEraseSector
</UL>

<P><STRONG><a name="[110]"></a>SPI_FLASH_BulkErase</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[111]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[112]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCfg
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevWrite
</UL>

<P><STRONG><a name="[113]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCfg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
</UL>

<P><STRONG><a name="[114]"></a>SPI_FLASH_ReadDeviceID</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[115]"></a>SPI_FLASH_StartReadSequence</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[116]"></a>SPI_FLASH_ReadByte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[117]"></a>SPI_FLASH_SendHalfWord</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[118]"></a>SPI_Flash_PowerDown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[119]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[ed]"></a>LED_GPIO_Config</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f2]"></a>Key_GPIO_Config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[11a]"></a>Key_Scan</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[11c]"></a>SD_DeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[135]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[137]"></a>SD_SelectDeselect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SelectDeselect
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[142]"></a>SD_GetCardInfo</STRONG> (Thumb, 762 bytes, Stack size 20 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13b]"></a>SD_InitializeCards</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[140]"></a>SD_PowerON</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_PowerON &rArr; CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[141]"></a>SD_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[143]"></a>SD_SendStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[144]"></a>SD_GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_GetState &rArr; SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[145]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[146]"></a>SD_PowerOFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[147]"></a>SD_SendSDStatus</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardStatus
</UL>

<P><STRONG><a name="[148]"></a>SD_GetCardStatus</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[149]"></a>SD_ReadBlock</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[14d]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[14e]"></a>SD_WaitReadOperation</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_WaitReadOperation &rArr; SD_DMAEndOfTransferStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[14f]"></a>SD_WriteBlock</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[150]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[151]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_DMAEndOfTransferStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[3fb]"></a>SD_GetTransferState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_sdio_sdcard.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>SD_StopTransfer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[154]"></a>SD_Erase</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[155]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[3fc]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_sdio_sdcard.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>__lcd_write_start</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __lcd_write_start
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteBits
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_FillRect
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>

<P><STRONG><a name="[160]"></a>__lcd_read_start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __lcd_read_start
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadBits
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadStart
</UL>

<P><STRONG><a name="[162]"></a>__lcd_write_rgb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __lcd_write_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteRGB
</UL>

<P><STRONG><a name="[164]"></a>__lcd_read_pixel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ili9341_16bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadBits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadPixel
</UL>

<P><STRONG><a name="[166]"></a>__lcd_read_rgb</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __lcd_read_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadRGB
</UL>

<P><STRONG><a name="[157]"></a>LCD_SetRotate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetRotate
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[15d]"></a>EXT_LCD_WriteStart</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_write_start
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__xor_pixel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pos
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB8888
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB1555
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB888
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB332
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_LUT8
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_LUT4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_LUT1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB1555
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL1
</UL>

<P><STRONG><a name="[15f]"></a>EXT_LCD_ReadStart</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_read_start
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__xor_pixel
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_pixel
</UL>

<P><STRONG><a name="[35f]"></a>EXT_LCD_WritePixel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341_16bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__xor_pixel
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB8888
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB1555
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB888
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB332
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_LUT8
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_LUT4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_LUT1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB1555
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL1
</UL>

<P><STRONG><a name="[161]"></a>EXT_LCD_WriteRGB</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXT_LCD_WriteRGB &rArr; __lcd_write_rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_write_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
</UL>

<P><STRONG><a name="[163]"></a>EXT_LCD_ReadPixel</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXT_LCD_ReadPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_read_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__xor_pixel
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_pixel
</UL>

<P><STRONG><a name="[165]"></a>EXT_LCD_ReadRGB</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXT_LCD_ReadRGB &rArr; __lcd_read_rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_read_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>

<P><STRONG><a name="[167]"></a>EXT_LCD_FillRect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXT_LCD_FillRect &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_write_start
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_write_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_vline
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_hline
</UL>

<P><STRONG><a name="[169]"></a>EXT_LCD_ReadBits</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXT_LCD_ReadBits &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_read_pixel
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_read_start
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_bits
</UL>

<P><STRONG><a name="[16a]"></a>EXT_LCD_WriteBits</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EXT_LCD_WriteBits &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_write_start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lcd_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB565
</UL>

<P><STRONG><a name="[16c]"></a>LCD_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_Init &rArr; GUI_msleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRotate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardInit
</UL>

<P><STRONG><a name="[16e]"></a>LCD_BackLed_Control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_BackLed_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BkLight
</UL>

<P><STRONG><a name="[ef]"></a>FSMC_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, bsp_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSMC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f0]"></a>FSMC_InitSRAM</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, bsp_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FSMC_InitSRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[f1]"></a>FSMC_InitLCD</STRONG> (Thumb, 156 bytes, Stack size 128 bytes, bsp_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FSMC_InitLCD &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[19f]"></a>disk_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[179]"></a>disk_initialize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[17a]"></a>disk_read</STRONG> (Thumb, 182 bytes, Stack size 552 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + In Cycle
<LI>Call Chain = disk_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[17c]"></a>disk_write</STRONG> (Thumb, 188 bytes, Stack size 552 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + In Cycle
<LI>Call Chain = disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[17d]"></a>disk_ioctl</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_ioctl &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1a3]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[187]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[182]"></a>get_fat</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[183]"></a>put_fat</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1a1]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[1a2]"></a>f_open</STRONG> (Thumb, 382 bytes, Stack size 600 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[1a5]"></a>f_read</STRONG> (Thumb, 480 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[1a6]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[1a7]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1a8]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[1a9]"></a>f_lseek</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1aa]"></a>f_opendir</STRONG> (Thumb, 118 bytes, Stack size 552 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[1ab]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[1ac]"></a>f_readdir</STRONG> (Thumb, 100 bytes, Stack size 544 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[1ad]"></a>f_stat</STRONG> (Thumb, 68 bytes, Stack size 584 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[1ae]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1af]"></a>f_truncate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1b0]"></a>f_unlink</STRONG> (Thumb, 174 bytes, Stack size 616 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[1b1]"></a>f_mkdir</STRONG> (Thumb, 358 bytes, Stack size 600 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[1b2]"></a>f_chmod</STRONG> (Thumb, 92 bytes, Stack size 592 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1b3]"></a>f_rename</STRONG> (Thumb, 266 bytes, Stack size 648 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[1b4]"></a>f_utime</STRONG> (Thumb, 94 bytes, Stack size 584 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1b5]"></a>f_mkfs</STRONG> (Thumb, 1622 bytes, Stack size 112 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = f_mkfs &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[1b6]"></a>f_gets</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[1b8]"></a>f_putc</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[1b9]"></a>f_puts</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[1ba]"></a>f_printf</STRONG> (Thumb, 674 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[197]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
</UL>

<P><STRONG><a name="[18b]"></a>ff_wtoupper</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, cc936.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[1be]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1ea]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1e8]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1f2]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1ee]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
</UL>

<P><STRONG><a name="[1bb]"></a>xQueueGenericReset</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1c1]"></a>xQueueGenericCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1c8]"></a>xQueueGenericSend</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[1cf]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>

<P><STRONG><a name="[1d0]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
</UL>

<P><STRONG><a name="[1d4]"></a>xQueueGenericReceive</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemWait
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[1d7]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>

<P><STRONG><a name="[1d8]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemCreate
</UL>

<P><STRONG><a name="[1d9]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1db]"></a>xQueueGiveFromISR</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPostISR
</UL>

<P><STRONG><a name="[1dc]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1dd]"></a>xQueuePeekFromISR</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1de]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1df]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1e0]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1e2]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[1e1]"></a>vQueueDelete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemDelete
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexDelete
</UL>

<P><STRONG><a name="[1e4]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1e5]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3fd]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>pcQueueGetName</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
</UL>

<P><STRONG><a name="[1ed]"></a>vTaskDelete</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Delete
</UL>

<P><STRONG><a name="[1f0]"></a>xTaskIncrementTick</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1cd]"></a>xTaskResumeAll</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ca]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f3]"></a>vTaskDelayUntil</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[eb]"></a>vTaskDelay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Entry
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Yield
</UL>

<P><STRONG><a name="[1f4]"></a>eTaskGetState</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1f5]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1f6]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1f7]"></a>vTaskPrioritySet</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[db]"></a>vTaskSwitchContext</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[1f8]"></a>vTaskSuspend</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fa]"></a>vTaskResume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fb]"></a>xTaskResumeFromISR</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f4]"></a>vTaskStartScheduler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[21a]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
</UL>

<P><STRONG><a name="[200]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[3ff]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>pcTaskGetName</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1cc]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[202]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1bd]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[203]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c9]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSetTimeOutState &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1cb]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c4]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1d1]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[f5]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1d6]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c7]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[400]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[204]"></a>ulTaskNotifyTake</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[205]"></a>xTaskNotifyWait</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[206]"></a>xTaskGenericNotify</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[207]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[208]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[209]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1c2]"></a>pvPortMalloc</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1e3]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[401]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[20c]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1fd]"></a>xPortStartScheduler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ff]"></a>vPortEndScheduler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[1bc]"></a>vPortEnterCritical</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1bf]"></a>vPortExitCritical</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f6]"></a>xPortSysTickHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1da]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[249]"></a>GUI_Arch_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[35e]"></a>GPU_CopyBits</STRONG> (Thumb, 12 bytes, Stack size 20 bytes, gui_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPU_CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_bits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_bits
</UL>

<P><STRONG><a name="[368]"></a>GPU_FillRect</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPU_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect
</UL>

<P><STRONG><a name="[369]"></a>GPU_FillRectARGB</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, gui_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPU_FillRectARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect_ARGB
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect_ARGB
</UL>

<P><STRONG><a name="[362]"></a>GPU_DrawBitmap</STRONG> (Thumb, 12 bytes, Stack size 20 bytes, gui_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPU_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB8888
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB1555
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB888
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB565
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB332
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB1555
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB8888
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB1555
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB888
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB565
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB332
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB1555
</UL>

<P><STRONG><a name="[376]"></a>GPU_ScaleBitmap</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPU_ScaleBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
</UL>

<P><STRONG><a name="[20f]"></a>GUI_MutexCreate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[210]"></a>GUI_MutexLock</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_WaitForWriteEnd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevEraseSector
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevWrite
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevGetID
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[211]"></a>GUI_MutexUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_WaitForWriteEnd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevEraseSector
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevWrite
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevGetID
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[212]"></a>GUI_MutexDelete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_MutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[213]"></a>GUI_SemCreate</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_SemCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
</UL>

<P><STRONG><a name="[214]"></a>GUI_SemWait</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_SemWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[215]"></a>GUI_SemPost</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_SemPost &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostNCPaintMessage
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostFlushMessage
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>

<P><STRONG><a name="[216]"></a>GUI_SemPostISR</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, x_gui_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[217]"></a>GUI_SemDelete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_SemDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteMsgQ
</UL>

<P><STRONG><a name="[218]"></a>GUI_GetCurThreadHandle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_GetCurThreadHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[219]"></a>GUI_GetTickCount</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_GetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
</UL>

<P><STRONG><a name="[21b]"></a>GUI_Yield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_Yield &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[16d]"></a>GUI_msleep</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_msleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_thread
</UL>

<P><STRONG><a name="[21c]"></a>GUI_Thread_Create</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, x_gui_freertos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUI_Thread_Create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[21d]"></a>GUI_Thread_Delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, x_gui_freertos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[221]"></a>TouchPanel_TranslateInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TouchPanel_TranslateInit &rArr; touch_screen_data_init &rArr; check_touch_screen_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_data_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFailed
</UL>

<P><STRONG><a name="[176]"></a>TouchPanel_TranslatePoint</STRONG> (Thumb, 198 bytes, Stack size 36 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TouchPanel_TranslatePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoint
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[239]"></a>TouchPanel_SetCalibrationSample</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gui_touchpanel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[222]"></a>TouchPanel_GetCalibrationPoints</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchPanel_GetCalibrationPoints
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[224]"></a>TouchPanel_CalibrationStart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchPanel_CalibrationStart
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[226]"></a>TouchPanel_CalibrationFinish</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TouchPanel_CalibrationFinish &rArr; touch_screen_data_init &rArr; check_touch_screen_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_data_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[228]"></a>TouchDev_SaveCfg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchDev_SaveCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationSucceed
</UL>

<P><STRONG><a name="[227]"></a>TouchPanel_CalibrationSucceed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchPanel_CalibrationSucceed &rArr; TouchDev_SaveCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_SaveCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[22a]"></a>TouchDev_LoadCfg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchDev_LoadCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFailed
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_thread
</UL>

<P><STRONG><a name="[229]"></a>TouchPanel_CalibrationFailed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_touchpanel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_LoadCfg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_TranslateInit
</UL>

<P><STRONG><a name="[256]"></a>GTP_Init_Panel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GTP_Init_Panel
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_Init
</UL>

<P><STRONG><a name="[237]"></a>TouchDev_GetAction</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchDev_GetAction
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_thread
</UL>

<P><STRONG><a name="[238]"></a>TouchDev_GetSample</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchDev_GetSample
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[23b]"></a>TouchScreenCalibrate</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gui_touchpanel_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = TouchScreenCalibrate &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRectArea
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDC
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_thread
</UL>

<P><STRONG><a name="[241]"></a>LCD_HardInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_lcd_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_HardInit &rArr; LCD_Init &rArr; GUI_msleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[242]"></a>LCD_BkLight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_lcd_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_BkLight &rArr; LCD_BackLed_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackLed_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[243]"></a>GUI_DisplayInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gui_lcd_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_DisplayInit &rArr; EXT_LCD_CreateSurfaceRGB565 &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_CreateSurfaceRGB565
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BkLight
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[ea]"></a>GUI_Startup</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gui_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GUI_Startup &rArr; GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevInit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetScreenSurface
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefFont
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Default_FontInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arch_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Entry
</UL>

<P><STRONG><a name="[24c]"></a>GUI_InputInit</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, gui_input_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_InputInit &rArr; TouchPanel_TranslateInit &rArr; touch_screen_data_init &rArr; check_touch_screen_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_LoadCfg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_TranslateInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[254]"></a>GUI_InputHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_input_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = GUI_InputHandler &rArr; GUI_TouchHandler &rArr; MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[253]"></a>TouchDev_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_touch_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TouchDev_Init &rArr; GTP_Init_Panel
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputInit
</UL>

<P><STRONG><a name="[257]"></a>TouchDev_GetPoint</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_touch_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchDev_GetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>

<P><STRONG><a name="[255]"></a>GUI_TouchHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_touch_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = GUI_TouchHandler &rArr; MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetPoint
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetAction
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputHandler
</UL>

<P><STRONG><a name="[25b]"></a>GUI_Init_Extern_Font_Stream</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, gui_font_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GUI_Init_Extern_Font_Stream &rArr; RES_GetInfo_AbsAddr &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFontEx
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font
</UL>

<P><STRONG><a name="[25e]"></a>GUI_Init_Extern_Font_2RAM</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, gui_font_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFont
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[261]"></a>GUI_Init_Extern_Font</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_font_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GUI_Init_Extern_Font &rArr; GUI_Init_Extern_Font_Stream &rArr; RES_GetInfo_AbsAddr &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_Stream
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Default_FontInit
</UL>

<P><STRONG><a name="[24f]"></a>GUI_Default_FontInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_font_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GUI_Default_FontInit &rArr; GUI_Init_Extern_Font &rArr; GUI_Init_Extern_Font_Stream &rArr; RES_GetInfo_AbsAddr &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFont
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[247]"></a>GUI_VMEM_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_VMEM_Init &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
</UL>

<P><STRONG><a name="[25f]"></a>GUI_VMEM_Alloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_alloc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_Load_Content
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmalloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Alloc
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
</UL>

<P><STRONG><a name="[264]"></a>GUI_VMEM_Free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfree
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Free
</UL>

<P><STRONG><a name="[246]"></a>GUI_MEM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_mem_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
</UL>

<P><STRONG><a name="[266]"></a>GUI_MEM_Alloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_CreateSurfaceRGB565
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_Alloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillPolygon
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
</UL>

<P><STRONG><a name="[267]"></a>GUI_MEM_Free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delete_font
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delete_font
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteSurface
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillPolygon
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_KillWindowTimers
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RemoveWindowMessage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteMsgQ
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
</UL>

<P><STRONG><a name="[268]"></a>GUI_GRAM_Alloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_GRAM_Alloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorInit
</UL>

<P><STRONG><a name="[269]"></a>GUI_GRAM_Free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_mem_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_GRAM_Free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteSurface
</UL>

<P><STRONG><a name="[26a]"></a>vmalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_mem_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>

<P><STRONG><a name="[26b]"></a>vfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_mem_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
</UL>

<P><STRONG><a name="[248]"></a>GUI_Log_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_log_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GUI_Log_Init &rArr; Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LowLevelInit
</UL>

<P><STRONG><a name="[225]"></a>GUI_Printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_log_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFailed
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationSucceed
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFinish
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationStart
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
</UL>

<P><STRONG><a name="[24b]"></a>RES_DevInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_resource_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RES_DevInit &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[26c]"></a>RES_DevGetID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_resource_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>

<P><STRONG><a name="[26d]"></a>RES_DevWrite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_resource_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>

<P><STRONG><a name="[25a]"></a>RES_DevRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_resource_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_Load_Content
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_read_data_exFlash
</UL>

<P><STRONG><a name="[26e]"></a>RES_DevEraseSector</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_resource_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>

<P><STRONG><a name="[26f]"></a>RES_WaitForWriteEnd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_resource_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>

<P><STRONG><a name="[270]"></a>RES_GetOffset</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, gui_resource_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strncasecmp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strlen
</UL>

<P><STRONG><a name="[25c]"></a>RES_GetInfo_AbsAddr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gui_resource_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RES_GetInfo_AbsAddr &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strncasecmp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_Load_Content
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_Stream
</UL>

<P><STRONG><a name="[273]"></a>RES_Load_Content</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, gui_resource_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>

<P><STRONG><a name="[251]"></a>FileSystem_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, gui_fs_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = FileSystem_Init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[274]"></a>gui_app_thread</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_desktop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = gui_app_thread &rArr; TouchScreenCalibrate &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetAction
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_LoadCfg
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_desktop.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>GUI_DesktopStartup</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, gui_desktop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateMessage
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[404]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFinish
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_TranslateInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_font
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_XRGB8888
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_bits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_RGB565
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_bits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_copy_bits
</UL>

<P><STRONG><a name="[405]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[407]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>

<P><STRONG><a name="[2bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_Alloc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
</UL>

<P><STRONG><a name="[409]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[34a]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
</UL>

<P><STRONG><a name="[373]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
</UL>

<P><STRONG><a name="[40a]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[2df]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[40b]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[295]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[30e]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[379]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[34e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[34d]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[34f]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[40c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[40d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[40e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[40f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[287]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[28f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[28e]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[da]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[411]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>AA_DrawBoldLine</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gd_line.o(i.AA_DrawBoldLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AA_DrawBoldLine &rArr; _Wu_DrawBoldLine &rArr; gdSetPixelARGB &rArr; _gdSetPixelARGB &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[363]"></a>ARGB4444_GetARGB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, surface_argb4444.o(i.ARGB4444_GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARGB4444_GetARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
</UL>

<P><STRONG><a name="[29c]"></a>BeginDraw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_core.o(i.BeginDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMemDC
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[2a0]"></a>BeginPaint</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, gui_window.o(i.BeginPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = BeginPaint &rArr; GetDCEx &rArr; _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[2a3]"></a>BitBlt</STRONG> (Thumb, 300 bytes, Stack size 120 bytes, gui_blt.o(i.BitBlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BitBlt &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_BitBlt
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[2aa]"></a>CheckWindowHit</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, gui_window.o(i.CheckWindowHit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CheckWindowHit &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRectEmpty
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[2b0]"></a>CommFace_DrawWindowNC</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, gui_face.o(i.CommFace_DrawWindowNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = CommFace_DrawWindowNC &rArr; DrawWindowNC &rArr; DrawRoundRect &rArr; _gdDrawArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToWindow
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowRect
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowDC
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRectToScreen
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
</UL>

<P><STRONG><a name="[233]"></a>CopyRect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_region.o(i.CopyRect))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[2bc]"></a>CreateDC</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, gui_gdi.o(i.CreateDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CreateDC &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDC
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[2bf]"></a>CreateFont</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gui_font.o(i.CreateFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CreateFont &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFontEx
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFT_CreateFont
</UL>

<P><STRONG><a name="[2b5]"></a>CreateRectRgnIndirect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_region.o(i.CreateRectRgnIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateRectRgnIndirect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[2a6]"></a>CursorCheck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_cursor.o(i.CursorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixelARGB
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
</UL>

<P><STRONG><a name="[2c2]"></a>CursorFix</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_cursor.o(i.CursorFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CursorFix &rArr; GL_CursorFix &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorFix
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
</UL>

<P><STRONG><a name="[2c4]"></a>DC_Alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_gdi.o(i.DC_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DC_Alloc &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>

<P><STRONG><a name="[27c]"></a>DefDesktopProc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_window.o(i.DefDesktopProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = DefDesktopProc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[2c5]"></a>DefWindowProc</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, gui_window.o(i.DefWindowProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrncpy
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefDesktopProc
</UL>

<P><STRONG><a name="[2d1]"></a>DeleteDC</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gui_gdi.o(i.DeleteDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DeleteDC &rArr; GUI_DeleteSurface &rArr; GUI_GRAM_Free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteSurface
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[2bb]"></a>DeleteRgn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_region.o(i.DeleteRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DeleteRgn &rArr; GUI_RectLL_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[2cf]"></a>DestroyWindow</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gui_window.o(i.DestroyWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + In Cycle
<LI>Call Chain = DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClrInputWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[27f]"></a>DispatchMessage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_message.o(i.DispatchMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispatchMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHWND
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[2dc]"></a>Draw3DRect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd_rect.o(i.Draw3DRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Draw3DRect &rArr; gdDraw3DRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
</UL>

<P><STRONG><a name="[2de]"></a>DrawBitmap</STRONG> (Thumb, 994 bytes, Stack size 128 bytes, gui_bitmap.o(i.DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DrawBitmap &rArr; BeginDraw &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
</UL>

<P><STRONG><a name="[231]"></a>DrawCircle</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, gd_circle.o(i.DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = DrawCircle &rArr; FillArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawCircle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
</UL>

<P><STRONG><a name="[2e2]"></a>DrawRect</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, gd_rect.o(i.DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DrawRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InflateRect
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[2e6]"></a>DrawRoundRect</STRONG> (Thumb, 680 bytes, Stack size 104 bytes, gd_rect.o(i.DrawRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = DrawRoundRect &rArr; _gdDrawArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__InitCircle4
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__CaluCircle4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetRect
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawArc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[236]"></a>DrawTextEx</STRONG> (Thumb, 654 bytes, Stack size 136 bytes, gd_text.o(i.DrawTextEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = DrawTextEx &rArr; DrawRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InflateRect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawRect
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFontInfo
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawChar
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrlen
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstrchr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[244]"></a>EXT_LCD_CreateSurfaceRGB565</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXT_LCD_CreateSurfaceRGB565 &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SurfaceInit_RGB565
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DisplayInit
</UL>

<P><STRONG><a name="[2d5]"></a>EnableWindow</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gui_window.o(i.EnableWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = EnableWindow &rArr; InvalidateRect &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
</UL>

<P><STRONG><a name="[2a8]"></a>EndDraw</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gui_core.o(i.EndDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EndDraw &rArr; WIN_Unlock &rArr; GUI_Unlock &rArr; GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMemDC
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorFix
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[2c8]"></a>EndPaint</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, gui_window.o(i.EndPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = EndPaint &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[2e0]"></a>FillArc</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, gd_arc.o(i.FillArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = FillArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArc
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
</UL>

<P><STRONG><a name="[305]"></a>FillPolygon</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, gd_polygon.o(i.FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillPolygon
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[22c]"></a>FillRect</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, gd_rect.o(i.FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = FillRect &rArr; _gdFillRect &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_cursor
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2fb]"></a>FillRoundRect</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gd_rect.o(i.FillRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FillRoundRect &rArr; _FillRoundRect &rArr; _gdFillRect &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRoundRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[341]"></a>GDI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gdi.o(i.GDI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[a9]"></a>GL8_copy_bits</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gl_mem_8bpp.o(i.GL8_copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL8_copy_bits &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b6]"></a>GL8_draw_bitmap_AL1</STRONG> (Thumb, 268 bytes, Stack size 52 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL8_draw_bitmap_AL1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b7]"></a>GL8_draw_bitmap_AL2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b8]"></a>GL8_draw_bitmap_AL4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL4))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b9]"></a>GL8_draw_bitmap_AL8</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL8_draw_bitmap_AL8
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b1]"></a>GL8_draw_bitmap_ARGB1555</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_ARGB1555
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b2]"></a>GL8_draw_bitmap_ARGB4444</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB4444))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b5]"></a>GL8_draw_bitmap_ARGB8888</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL8_draw_bitmap_ARGB8888
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[aa]"></a>GL8_draw_bitmap_LUT1</STRONG> (Thumb, 272 bytes, Stack size 52 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL8_draw_bitmap_LUT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ab]"></a>GL8_draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ac]"></a>GL8_draw_bitmap_LUT4</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL8_draw_bitmap_LUT4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ad]"></a>GL8_draw_bitmap_LUT8</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL8_draw_bitmap_LUT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ae]"></a>GL8_draw_bitmap_RGB332</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_RGB332
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[af]"></a>GL8_draw_bitmap_RGB565</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_RGB565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b3]"></a>GL8_draw_bitmap_RGB888</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_RGB888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b0]"></a>GL8_draw_bitmap_XRGB1555</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_XRGB1555
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[b4]"></a>GL8_draw_bitmap_XRGB8888</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_draw_bitmap_XRGB8888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a6]"></a>GL8_draw_hline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_mem_8bpp.o(i.GL8_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GL8_draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a7]"></a>GL8_draw_vline</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gl_mem_8bpp.o(i.GL8_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GL8_draw_vline &rArr; GUI_memset8_step
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a8]"></a>GL8_fill_rect</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, gl_mem_8bpp.o(i.GL8_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GL8_fill_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a4]"></a>GL8_get_pixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_get_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[bb]"></a>GL8_rotate_bitmap</STRONG> (Thumb, 1008 bytes, Stack size 176 bytes, gl_mem_8bpp.o(i.GL8_rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = GL8_rotate_bitmap &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AlphaBlendValue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[ba]"></a>GL8_scale_bitmap</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, gl_mem_8bpp.o(i.GL8_scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL8_scale_bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a2]"></a>GL8_set_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_set_addr))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a3]"></a>GL8_set_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_set_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[a5]"></a>GL8_xor_pixel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL8_xor_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_8bpp.o(i.GL_MEM_8BPP_Init)
</UL>
<P><STRONG><a name="[2a7]"></a>GL_BitBlt</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, gl_bitblt.o(i.GL_BitBlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GL_BitBlt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[2c1]"></a>GL_CursorCheck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_CursorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[2c3]"></a>GL_CursorFix</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_CursorFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_CursorFix &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorFix
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[24e]"></a>GL_CursorInit</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, gl_cursor.o(i.GL_CursorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GL_CursorInit &rArr; GUI_GRAM_Alloc &rArr; GUI_VMEM_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[320]"></a>GL_GetCursorPos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gl_cursor.o(i.GL_GetCursorPos))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
</UL>

<P><STRONG><a name="[347]"></a>GL_MEM_16BPP_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.GL_MEM_16BPP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[348]"></a>GL_MEM_32BPP_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.GL_MEM_32BPP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[346]"></a>GL_MEM_8BPP_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, gl_mem_8bpp.o(i.GL_MEM_8BPP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[314]"></a>GL_SetCursorPos</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_SetCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_SetCursorPos &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
</UL>

<P><STRONG><a name="[315]"></a>GL_ShowCursor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gl_cursor.o(i.GL_ShowCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GL_ShowCursor &rArr; _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
</UL>

<P><STRONG><a name="[302]"></a>GUI_AA_Begin</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gui_aa_core.o(i.GUI_AA_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_AA_Begin
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawArc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
</UL>

<P><STRONG><a name="[304]"></a>GUI_AA_End</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_aa_core.o(i.GUI_AA_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GUI_AA_End &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawArc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
</UL>

<P><STRONG><a name="[308]"></a>GUI_AlphaBlendValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_AlphaBlendValue))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_bitmap_ARGB8888
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_bitmap_AL8
</UL>

<P><STRONG><a name="[2d8]"></a>GUI_ClrInputWindow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_input.o(i.GUI_ClrInputWindow))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
</UL>

<P><STRONG><a name="[27d]"></a>GUI_CreateDesktop</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, gui_window.o(i.GUI_CreateDesktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = GUI_CreateDesktop &rArr; EnableWindow &rArr; InvalidateRect &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[318]"></a>GUI_CreateMsgQ</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gui_message.o(i.GUI_CreateMsgQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_CreateMsgQ &rArr; GUI_SemCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[319]"></a>GUI_DeleteMsgQ</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gui_message.o(i.GUI_DeleteMsgQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_DeleteMsgQ &rArr; GUI_SemDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[2d2]"></a>GUI_DeleteSurface</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, x_gui.o(i.GUI_DeleteSurface))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_DeleteSurface &rArr; GUI_GRAM_Free &rArr; GUI_VMEM_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GRAM_Free
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
</UL>

<P><STRONG><a name="[301]"></a>GUI_FlushHandler</STRONG> (Thumb, 524 bytes, Stack size 168 bytes, gui_window.o(i.GUI_FlushHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = GUI_FlushHandler &rArr; ReleaseDC &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorFix
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
</UL>

<P><STRONG><a name="[345]"></a>GUI_Input_Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gui_input.o(i.GUI_Input_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[31c]"></a>GUI_KillWindowTimers</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_timer.o(i.GUI_KillWindowTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_KillWindowTimers &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[2d7]"></a>GUI_Lock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x_gui.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForegroundWindow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapture
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
</UL>

<P><STRONG><a name="[375]"></a>GUI_MakeBilinearARGB8888ii</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, gui_libc.o(i.GUI_MakeBilinearARGB8888ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_MakeBilinearARGB8888ii
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
</UL>

<P><STRONG><a name="[374]"></a>GUI_MakeBilinearXRGB8888ii</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, gui_libc.o(i.GUI_MakeBilinearXRGB8888ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_MakeBilinearXRGB8888ii
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
</UL>

<P><STRONG><a name="[342]"></a>GUI_Message_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_message.o(i.GUI_Message_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[300]"></a>GUI_PaintHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, gui_window.o(i.GUI_PaintHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + In Cycle
<LI>Call Chain = GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
</UL>

<P><STRONG><a name="[2c0]"></a>GUI_RectLL_Alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, x_gui.o(i.GUI_RectLL_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
</UL>

<P><STRONG><a name="[2d4]"></a>GUI_RectLL_Free</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x_gui.o(i.GUI_RectLL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_RectLL_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
</UL>

<P><STRONG><a name="[31d]"></a>GUI_RemoveWindowMessage</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, gui_message.o(i.GUI_RemoveWindowMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_RemoveWindowMessage &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowMsgQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[250]"></a>GUI_SetDefFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_gui.o(i.GUI_SetDefFont))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[24d]"></a>GUI_SetScreenSurface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_gui.o(i.GUI_SetScreenSurface))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[336]"></a>GUI_TimerHandler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gui_timer.o(i.GUI_TimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_TimerHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[344]"></a>GUI_Timer_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_timer.o(i.GUI_Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[2d9]"></a>GUI_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_gui.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_Unlock &rArr; GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCursorPos
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCursor
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForegroundWindow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapture
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
</UL>

<P><STRONG><a name="[343]"></a>GUI_Window_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_window.o(i.GUI_Window_Init))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_GUI_Init
</UL>

<P><STRONG><a name="[334]"></a>GUI_abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_abs))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[312]"></a>GUI_memset16</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_memset16))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_hline
</UL>

<P><STRONG><a name="[366]"></a>GUI_memset16_step</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, gui_libc.o(i.GUI_memset16_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_memset16_step
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_vline
</UL>

<P><STRONG><a name="[365]"></a>GUI_memset32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_memset32))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_hline
</UL>

<P><STRONG><a name="[367]"></a>GUI_memset32_step</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, gui_libc.o(i.GUI_memset32_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_memset32_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_vline
</UL>

<P><STRONG><a name="[309]"></a>GUI_memset8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_memset8))
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_fill_rect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_hline
</UL>

<P><STRONG><a name="[30a]"></a>GUI_memset8_step</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, gui_libc.o(i.GUI_memset8_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_memset8_step
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_draw_vline
</UL>

<P><STRONG><a name="[2cc]"></a>GUI_wstr_alloc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_libc.o(i.GUI_wstr_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_wstr_alloc &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[2cb]"></a>GUI_wstr_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstr_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_wstr_free &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
</UL>

<P><STRONG><a name="[2ef]"></a>GUI_wstrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstrchr))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[2cd]"></a>GUI_wstrlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstrlen))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[2ce]"></a>GUI_wstrncpy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_libc.o(i.GUI_wstrncpy))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[31f]"></a>GetCapture</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetCapture &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[277]"></a>GetClientRect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_window.o(i.GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetClientRect &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[2b3]"></a>GetClientRectToScreen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_window.o(i.GetClientRectToScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetClientRectToScreen &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[259]"></a>GetCursorPos</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_cursor.o(i.GetCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetCursorPos &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_GetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>

<P><STRONG><a name="[23c]"></a>GetDC</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gui_window.o(i.GetDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetDC &rArr; GetWindowLong &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
</UL>

<P><STRONG><a name="[2a1]"></a>GetDCEx</STRONG> (Thumb, 456 bytes, Stack size 96 bytes, gui_window.o(i.GetDCEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GetDCEx &rArr; _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDC
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC_Alloc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowDC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[23d]"></a>GetDesktopWindow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetDesktopWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetDesktopWindow &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
</UL>

<P><STRONG><a name="[2f6]"></a>GetForegroundWindow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_window.o(i.GetForegroundWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetForegroundWindow &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[280]"></a>GetMessage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gui_message.o(i.GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = GetMessage &rArr; PeekMessage &rArr; UpdateWindow &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemWait
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowMsgQ
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[2b2]"></a>GetParent</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_window.o(i.GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetParent &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[350]"></a>GetRGB</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_gdi.o(i.GetRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[223]"></a>GetSystemMetrics</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, x_gui.o(i.GetSystemMetrics))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_GetCalibrationPoints
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
</UL>

<P><STRONG><a name="[2f0]"></a>GetTextExtent</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, gui_font.o(i.GetTextExtent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetTextExtent
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[2f3]"></a>GetTextWidth</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, gui_font.o(i.GetTextWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetTextWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[324]"></a>GetWindow</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_window.o(i.GetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetWindow &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[2b7]"></a>GetWindowDC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_window.o(i.GetWindowDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = GetWindowDC &rArr; GetDCEx &rArr; _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[325]"></a>GetWindowFromPoint</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_window.o(i.GetWindowFromPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetWindowFromPoint &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[31b]"></a>GetWindowLong</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gui_window.o(i.GetWindowLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetWindowLong &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[31e]"></a>GetWindowMsgQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_window.o(i.GetWindowMsgQ))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RemoveWindowMessage
</UL>

<P><STRONG><a name="[2f5]"></a>GetWindowRect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_window.o(i.GetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetWindowRect &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2a4]"></a>HDC_Lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_gdi.o(i.HDC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[2a9]"></a>HDC_Unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_gdi.o(i.HDC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextExtent
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextWidth
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
</UL>

<P><STRONG><a name="[230]"></a>HLine</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gd_line.o(i.HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HLine &rArr; solid_line &rArr; FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[2fc]"></a>InflateRect</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gui_region.o(i.InflateRect))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2af]"></a>InflateRectEx</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, gui_region.o(i.InflateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InflateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRoundRect
</UL>

<P><STRONG><a name="[2be]"></a>InitDC</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, gui_gdi.o(i.InitDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitDC &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateDC
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>

<P><STRONG><a name="[328]"></a>InsertRECT_LL</STRONG> (Thumb, 268 bytes, Stack size 96 bytes, gui_region.o(i.InsertRECT_LL))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = InsertRECT_LL &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoveredRect
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RECT_LLAddRect
</UL>

<P><STRONG><a name="[32a]"></a>IntersectRect</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gui_region.o(i.IntersectRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
</UL>

<P><STRONG><a name="[2c9]"></a>InvalidateRect</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, gui_window.o(i.InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = InvalidateRect &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
</UL>

<P><STRONG><a name="[329]"></a>IsCoveredRect</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gui_region.o(i.IsCoveredRect))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
</UL>

<P><STRONG><a name="[377]"></a>IsEnableAlpha</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_gdi.o(i.IsEnableAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
</UL>

<P><STRONG><a name="[32d]"></a>IsEnableDragWindow</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_window.o(i.IsEnableDragWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IsEnableDragWindow &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[2db]"></a>IsHWND</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_window.o(i.IsHWND))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateMessage
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchMessage
</UL>

<P><STRONG><a name="[29e]"></a>IsMemDC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_gdi.o(i.IsMemDC))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>

<P><STRONG><a name="[339]"></a>IsRectEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_region.o(i.IsRectEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
</UL>

<P><STRONG><a name="[32e]"></a>IsWindowEnabled</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_window.o(i.IsWindowEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IsWindowEnabled &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[234]"></a>MapRGB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_gdi.o(i.MapRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MapRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2f9]"></a>MapXRGB8888</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_gdi.o(i.MapXRGB8888))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[258]"></a>MouseInput</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, gui_input.o(i.MouseInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = MouseInput &rArr; MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDesktopWindow
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCursorPos
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapture
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TouchHandler
</UL>

<P><STRONG><a name="[23a]"></a>OffsetRect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_region.o(i.OffsetRect))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[323]"></a>PeekMessage</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, gui_message.o(i.PeekMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = PeekMessage &rArr; UpdateWindow &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Yield
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowCleanup
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TimerHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[331]"></a>PostCloseMessage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gui_message.o(i.PostCloseMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PostCloseMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[2c7]"></a>PostMessage</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, gui_message.o(i.PostMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[2d0]"></a>PostQuitMessage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_message.o(i.PostQuitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PostQuitMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsChild
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[338]"></a>RECT_LLAddRect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_region.o(i.RECT_LLAddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RECT_LLAddRect &rArr; InsertRECT_LL &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[37b]"></a>RGB32_AVG</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gui_core.o(i.RGB32_AVG))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RGB32_AVG
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[2fa]"></a>RGB32_Offset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gui_core.o(i.RGB32_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RGB32_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2b6]"></a>RGN_SubtractRect</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, gui_region.o(i.RGN_SubtractRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectLL_Alloc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRectEmpty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoveredRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[240]"></a>ReleaseDC</STRONG> (Thumb, 358 bytes, Stack size 128 bytes, gui_window.o(i.ReleaseDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ReleaseDC &rArr; _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostFlushMessage
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>

<P><STRONG><a name="[330]"></a>ScreenToClient</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_window.o(i.ScreenToClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ScreenToClient &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[2f8]"></a>ScreenToWindow</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gui_window.o(i.ScreenToWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ScreenToWindow &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2d6]"></a>SendMessage</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gui_message.o(i.SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SendMessage &rArr; PostMessage &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
</UL>

<P><STRONG><a name="[279]"></a>SetBrushColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gdi.o(i.SetBrushColor))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[332]"></a>SetCursorPos</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_cursor.o(i.SetCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetCursorPos &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[278]"></a>SetFont</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_font.o(i.SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[2c6]"></a>SetForegroundWindow</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, gui_window.o(i.SetForegroundWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
</UL>

<P><STRONG><a name="[22e]"></a>SetPenColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gdi.o(i.SetPenColor))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[23f]"></a>SetRectArea</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_region.o(i.SetRectArea))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
</UL>

<P><STRONG><a name="[235]"></a>SetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gdi.o(i.SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[27b]"></a>SetTimer</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, gui_timer.o(i.SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SetTimer &rArr; WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[2ca]"></a>SetWindowPos</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, gui_window.o(i.SetWindowPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
</UL>

<P><STRONG><a name="[275]"></a>ShowCursor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_cursor.o(i.ShowCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ShowCursor &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_app_thread
</UL>

<P><STRONG><a name="[23e]"></a>ShowWindow</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gui_window.o(i.ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
</UL>

<P><STRONG><a name="[31a]"></a>SubtractRectEx</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, gui_region.o(i.SubtractRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SubtractRectEx &rArr; IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCoveredRect
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[2fd]"></a>SurfaceInit_RGB565</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, surface_rgb565.o(i.SurfaceInit_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SurfaceInit_RGB565
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_CreateSurfaceRGB565
</UL>

<P><STRONG><a name="[27a]"></a>TextOut</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gd_text.o(i.TextOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TextOut &rArr; _DrawString &rArr; _DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
</UL>

<P><STRONG><a name="[27e]"></a>TranslateMessage</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_message.o(i.TranslateMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TranslateMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHWND
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DesktopStartup
</UL>

<P><STRONG><a name="[335]"></a>UpdateWindow</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gui_window.o(i.UpdateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = UpdateWindow &rArr; GUI_PaintHandler &rArr;  GUI_PaintHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[22f]"></a>VLine</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gd_line.o(i.VLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = VLine &rArr; solid_line &rArr; FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Unlock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC_Lock
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>

<P><STRONG><a name="[29f]"></a>WIN_Lock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_window.o(i.WIN_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WIN_Lock &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRectToScreen
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWindowEnabled
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableDragWindow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
</UL>

<P><STRONG><a name="[2a2]"></a>WIN_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_window.o(i.WIN_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WIN_Unlock &rArr; GUI_Unlock &rArr; GUI_MutexUnlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWindow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginPaint
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefWindowProc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRectToScreen
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWindow
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWindowEnabled
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableDragWindow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
</UL>

<P><STRONG><a name="[260]"></a>XFT_CreateFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_font_xft.o(i.XFT_CreateFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = XFT_CreateFont &rArr; CreateFont &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Default_FontInit
</UL>

<P><STRONG><a name="[25d]"></a>XFT_CreateFontEx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_font_xft_ex.o(i.XFT_CreateFontEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = XFT_CreateFontEx &rArr; CreateFont &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFont
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_Stream
</UL>

<P><STRONG><a name="[24a]"></a>X_GUI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, x_gui.o(i.X_GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = X_GUI_Init &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Window_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_Init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Message_Init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Input_Init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MEM_8BPP_Init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MEM_32BPP_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MEM_16BPP_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[349]"></a>_CalculateWindowClipRgn</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, gui_window.o(i._CalculateWindowClipRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
</UL>

<P><STRONG><a name="[322]"></a>_ClientToScreen</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gui_window.o(i._ClientToScreen))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[2ad]"></a>_CopyRect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_region.o(i._CopyRect))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawRect
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
</UL>

<P><STRONG><a name="[2f4]"></a>_DrawChar</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_font.o(i._DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
</UL>

<P><STRONG><a name="[2f1]"></a>_DrawString</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, gd_text.o(i._DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawString &rArr; _DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetFontInfo
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[2b8]"></a>_GetCaptionRect</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gui_window.o(i._GetCaptionRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _GetCaptionRect &rArr; InflateRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRectEmpty
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2b9]"></a>_GetCloseBoxRect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_window.o(i._GetCloseBoxRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetCloseBoxRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRectEmpty
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[2f2]"></a>_GetFontInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_font.o(i._GetFontInfo))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawString
</UL>

<P><STRONG><a name="[2fe]"></a>_GetWindow</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, gui_window.o(i._GetWindow))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
</UL>

<P><STRONG><a name="[321]"></a>_GetWindowClipRgn</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gui_window.o(i._GetWindowClipRgn))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _GetWindowClipRgn &rArr; _CalculateWindowClipRgn &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
</UL>

<P><STRONG><a name="[326]"></a>_GetWindowFromPoint</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gui_window.o(i._GetWindowFromPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _GetWindowFromPoint &rArr;  _GetWindowFromPoint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowFromPoint
</UL>

<P><STRONG><a name="[2b1]"></a>_GetWindowRect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_window.o(i._GetWindowRect))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[2e5]"></a>_InflateRect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui_region.o(i._InflateRect))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
</UL>

<P><STRONG><a name="[2a5]"></a>_IntersectRect</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gui_region.o(i._IntersectRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawRect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorShow
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CursorHide
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateWindowClipRgn
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDCEx
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixelARGB
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
</UL>

<P><STRONG><a name="[337]"></a>_IsChild</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_window.o(i._IsChild))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostQuitMessage
</UL>

<P><STRONG><a name="[2d3]"></a>_IsEnableAA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_aa_core.o(i._IsEnableAA))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteDC
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawArc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRoundRect
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[30f]"></a>_IsIntersectRect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_region.o(i._IsIntersectRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PtInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntersectRect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertRECT_LL
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
</UL>

<P><STRONG><a name="[2ab]"></a>_IsWindowVisible</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_window.o(i._IsWindowVisible))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowClipRgn
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
</UL>

<P><STRONG><a name="[29d]"></a>_LPtoDP</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gui_gdi.o(i._LPtoDP))
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WindowToScreen
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitBlt
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixelARGB
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
</UL>

<P><STRONG><a name="[2e8]"></a>_OffsetRect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_region.o(i._OffsetRect))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
</UL>

<P><STRONG><a name="[33a]"></a>_PostFlushMessage</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_message.o(i._PostFlushMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _PostFlushMessage &rArr; GUI_SemPost &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
</UL>

<P><STRONG><a name="[355]"></a>_PostNCPaintMessage</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_message.o(i._PostNCPaintMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _PostNCPaintMessage &rArr; GUI_SemPost &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
</UL>

<P><STRONG><a name="[32c]"></a>_PostPaintMessage</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_message.o(i._PostPaintMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _PostPaintMessage &rArr; GUI_SemPost &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
</UL>

<P><STRONG><a name="[2ac]"></a>_PtInRect</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_region.o(i._PtInRect))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowFromPoint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
</UL>

<P><STRONG><a name="[32b]"></a>_ScreenToClient</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gui_window.o(i._ScreenToClient))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertInvRect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
</UL>

<P><STRONG><a name="[2b4]"></a>_ScreenToWindow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gui_window.o(i._ScreenToWindow))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[2ee]"></a>_SetDrawRect</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gui_gdi.o(i._SetDrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SetDrawRect &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>

<P><STRONG><a name="[2ae]"></a>_SetRectEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_region.o(i._SetRectEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWindowHit
</UL>

<P><STRONG><a name="[33b]"></a>_SetWindowToTop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gui_window.o(i._SetWindowToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _SetWindowToTop &rArr; GUI_Lock &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
</UL>

<P><STRONG><a name="[2da]"></a>_WindowCleanup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gui_window.o(i._WindowCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _WindowCleanup &rArr; DeleteRgn &rArr; GUI_RectLL_Free &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexDelete
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_KillWindowTimers
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RemoveWindowMessage
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DeleteMsgQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DestroyWindow
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekMessage
</UL>

<P><STRONG><a name="[353]"></a>_WindowToScreen</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gui_window.o(i._WindowToScreen))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
</UL>

<P><STRONG><a name="[29b]"></a>_Wu_DrawBoldLine</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, gd_line.o(i._Wu_DrawBoldLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _Wu_DrawBoldLine &rArr; gdSetPixelARGB &rArr; _gdSetPixelARGB &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawBoldLine
</UL>

<P><STRONG><a name="[35b]"></a>_Wu_DrawLine</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, gd_line.o(i._Wu_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _Wu_DrawLine &rArr; gdSetPixelARGB &rArr; _gdSetPixelARGB &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[35c]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[414]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[e9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Entry
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_2RAM
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init_Extern_Font_Stream
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSystem_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[36f]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[2eb]"></a>__CaluCircle4</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, gui_libc.o(i.__CaluCircle4))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawCircle
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRoundRect
</UL>

<P><STRONG><a name="[2ea]"></a>__InitCircle4</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_libc.o(i.__InitCircle4))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawCircle
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRoundRect
</UL>

<P><STRONG><a name="[36b]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[36c]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[36d]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[36e]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[371]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[372]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[370]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[415]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[416]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[417]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[37a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[2e9]"></a>_gdDrawArc</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, gd_arc.o(i._gdDrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _gdDrawArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Begin
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
</UL>

<P><STRONG><a name="[306]"></a>_gdFillPolygon</STRONG> (Thumb, 586 bytes, Stack size 72 bytes, gd_polygon.o(i._gdFillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gdFillPolygon &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
</UL>

<P><STRONG><a name="[bd]"></a>_gdHLine</STRONG> (Thumb, 322 bytes, Stack size 120 bytes, gd_line.o(i._gdHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_gdi.o(i.InitDC)
<LI> gui_aa_core.o(i.GUI_AA_End)
</UL>
<P><STRONG><a name="[2ec]"></a>_gdSetPixel</STRONG> (Thumb, 204 bytes, Stack size 112 bytes, gd_pixel.o(i._gdSetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _gdSetPixel &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawCircle
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
</UL>

<P><STRONG><a name="[351]"></a>_gdSetPixelARGB</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, gd_pixel.o(i._gdSetPixelARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _gdSetPixelARGB &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixelARGB
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>

<P><STRONG><a name="[2ed]"></a>_gdVLine</STRONG> (Thumb, 320 bytes, Stack size 112 bytes, gd_line.o(i._gdVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _gdVLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
</UL>

<P><STRONG><a name="[34b]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[30b]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[34c]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[2dd]"></a>gdDraw3DRect</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gd_rect.o(i.gdDraw3DRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gdDraw3DRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
</UL>

<P><STRONG><a name="[2e3]"></a>gdHLine</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gd_line.o(i.gdHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
</UL>

<P><STRONG><a name="[37c]"></a>gdLine</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, gd_line.o(i.gdLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gdLine &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdSetPixel
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdVLine
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solid_line
</UL>

<P><STRONG><a name="[35a]"></a>gdSetPixel</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, gd_pixel.o(i.gdSetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gdSetPixel &rArr; _gdSetPixel &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[359]"></a>gdSetPixelARGB</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, gd_pixel.o(i.gdSetPixelARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gdSetPixelARGB &rArr; _gdSetPixelARGB &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixelARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawBoldLine
</UL>

<P><STRONG><a name="[2e4]"></a>gdVLine</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gd_line.o(i.gdVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gdVLine &rArr; _gdVLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeginDraw
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdDraw3DRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
</UL>

<P><STRONG><a name="[30d]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL8_rotate_bitmap
</UL>

<P><STRONG><a name="[327]"></a>solid_line</STRONG> (Thumb, 764 bytes, Stack size 96 bytes, gd_line.o(i.solid_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = solid_line &rArr; FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillPolygon
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdLine
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Wu_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
</UL>

<P><STRONG><a name="[263]"></a>x_heap_alloc</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, x_heap.o(i.x_heap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x_heap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Alloc
</UL>

<P><STRONG><a name="[265]"></a>x_heap_free</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, x_heap.o(i.x_heap_free))
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Free
</UL>

<P><STRONG><a name="[262]"></a>x_heap_init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, x_heap.o(i.x_heap_init))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Init
</UL>

<P><STRONG><a name="[271]"></a>x_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_string.o(i.x_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
</UL>

<P><STRONG><a name="[272]"></a>x_strncasecmp</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, x_string.o(i.x_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetOffset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_GetInfo_AbsAddr
</UL>

<P><STRONG><a name="[364]"></a>xft_get_chr_entry_ex</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gui_font_xft_ex.o(i.xft_get_chr_entry_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xft_get_chr_entry_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_char
</UL>

<P><STRONG><a name="[36a]"></a>xft_get_chr_info_ex</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gui_font_xft_ex.o(i.xft_get_chr_info_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xft_get_chr_info_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_char_info
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[dd]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[dc]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[49]"></a>GUI_Thread_Entry</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = GUI_Thread_Entry &rArr; GUI_Startup &rArr; GUI_DesktopStartup &rArr; ShowWindow &rArr; SetWindowPos &rArr; _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>BSP_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_Init &rArr; FSMC_InitLCD &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitSRAM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_InitLCD
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>SPI_TIMEOUT_UserCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_flash_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[121]"></a>NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[124]"></a>SD_DMAEndOfTransferStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_DMAEndOfTransferStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[126]"></a>SD_DMA_RxConfig</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[12a]"></a>SD_DMA_TxConfig</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[12b]"></a>GPIO_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[12e]"></a>CmdResp1Error</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[12c]"></a>FindSCR</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[133]"></a>SDEnWideBus</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDEnWideBus &rArr; FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[138]"></a>CmdResp2Error</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[139]"></a>CmdResp6Error</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[13d]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13e]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13f]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_sdio_sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[153]"></a>IsCardProgramming</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, bsp_sdio_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[15b]"></a>delay_ms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macDEBUG_DELAY
</UL>

<P><STRONG><a name="[15a]"></a>macDEBUG_DELAY</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = macDEBUG_DELAY &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[15c]"></a>ILI9341_Init</STRONG> (Thumb, 614 bytes, Stack size 8 bytes, ili9341_16bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ILI9341_Init &rArr; macDEBUG_DELAY &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macDEBUG_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[168]"></a>__lcd_write_pixels</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ili9341_16bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_FillRect
</UL>

<P><STRONG><a name="[16b]"></a>__lcd_write_bits</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, ili9341_16bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteBits
</UL>

<P><STRONG><a name="[158]"></a>write_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili9341_16bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRotate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[159]"></a>write_dat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili9341_16bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetRotate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[16f]"></a>ADS7843_HardInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADS7843_HardInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[171]"></a>delay_us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_ReadAD
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_WrByte
</UL>

<P><STRONG><a name="[175]"></a>ADS7843_IsPenDown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ads7843.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
</UL>

<P><STRONG><a name="[170]"></a>ADS7843_WrByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS7843_WrByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_ReadAD
</UL>

<P><STRONG><a name="[174]"></a>InsertSort</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InsertSort
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_GetXY
</UL>

<P><STRONG><a name="[172]"></a>ADS7843_ReadAD</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADS7843_ReadAD &rArr; ADS7843_WrByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_WrByte
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_GetXY
</UL>

<P><STRONG><a name="[173]"></a>ADS7843_GetXY</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADS7843_GetXY &rArr; ADS7843_ReadAD &rArr; ADS7843_WrByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_ReadAD
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertSort
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSample
</UL>

<P><STRONG><a name="[bf]"></a>Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init &rArr; ADS7843_HardInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_HardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_IsPenDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>GetSample</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetSample &rArr; ADS7843_GetXY &rArr; ADS7843_ReadAD &rArr; ADS7843_WrByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS7843_GetXY
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>GetPoint</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetPoint &rArr; GetSample &rArr; ADS7843_GetXY &rArr; ADS7843_ReadAD &rArr; ADS7843_WrByte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_TranslatePoint
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>LoadCfg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LoadCfg &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>SaveCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ads7843.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SaveCfg &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads7843.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[181]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[190]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[199]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[17e]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[17f]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[180]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[184]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[185]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[186]"></a>dir_sdi</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[188]"></a>dir_next</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[189]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[19b]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1a4]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[18a]"></a>cmp_lfn</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[192]"></a>pick_lfn</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[194]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[18c]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[18f]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[18e]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[191]"></a>dir_read</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[193]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[195]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[196]"></a>get_fileinfo</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[198]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[19a]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[19e]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[19c]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[19d]"></a>find_volume</STRONG> (Thumb, 996 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1a0]"></a>validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[1b7]"></a>putc_bfd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[1c0]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1c3]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c5]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c6]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ce]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1d2]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1d3]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1e6]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1e7]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1e9]"></a>prvInitialiseNewTask</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ef]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1ec]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[1f1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1f9]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[1fc]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4a]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[20a]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4b]"></a>prvTaskExitError</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[21f]"></a>x_abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_touchpanel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_touch_screen_swap
</UL>

<P><STRONG><a name="[21e]"></a>check_touch_screen_swap</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_touch_screen_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_data_init
</UL>

<P><STRONG><a name="[220]"></a>touch_screen_data_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_touchpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touch_screen_data_init &rArr; check_touch_screen_swap
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_touch_screen_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFinish
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_TranslateInit
</UL>

<P><STRONG><a name="[22b]"></a>clr_cursor</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, gui_touchpanel_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = clr_cursor &rArr; FillRect &rArr; _gdFillRect &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[22d]"></a>draw_cursor</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_touchpanel_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = draw_cursor &rArr; DrawCircle &rArr; FillArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TouchPanel_Calibrate
</UL>

<P><STRONG><a name="[232]"></a>_TouchPanel_Calibrate</STRONG> (Thumb, 600 bytes, Stack size 136 bytes, gui_touchpanel_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = _TouchPanel_Calibrate &rArr; draw_cursor &rArr; DrawCircle &rArr; FillArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_TranslatePoint
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_msleep
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cursor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_cursor
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemMetrics
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetSample
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDev_GetAction
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationSucceed
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationFinish
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_CalibrationStart
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_GetCalibrationPoints
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchPanel_SetCalibrationSample
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffsetRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCalibrate
</UL>

<P><STRONG><a name="[245]"></a>GUI_LowLevelInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_LowLevelInit &rArr; GUI_VMEM_Init &rArr; GUI_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_VMEM_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Log_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Startup
</UL>

<P><STRONG><a name="[4c]"></a>font_read_data_exFlash</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gui_font_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = font_read_data_exFlash &rArr; RES_DevRead &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RES_DevRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_port.o(.text)
</UL>
<P><STRONG><a name="[276]"></a>_EraseBackgnd</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, gui_desktop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _EraseBackgnd &rArr; DrawTextEx &rArr; DrawRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyRect
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClientRect
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextOut
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desktop_proc
</UL>

<P><STRONG><a name="[4d]"></a>desktop_proc</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, gui_desktop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = desktop_proc &rArr; DefDesktopProc &rArr; DefWindowProc &rArr; DestroyWindow &rArr;  DestroyWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InputHandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Thread_Create
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefDesktopProc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EraseBackgnd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_desktop.o(.text)
</UL>
<P><STRONG><a name="[37d]"></a>plug_holes</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, x_heap.o(i.plug_holes))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_heap_free
</UL>

<P><STRONG><a name="[c5]"></a>__create_font</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_font_xft.o(i.__create_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __create_font &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>__delete_font</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_font_xft.o(i.__delete_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __delete_font &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>__draw_char</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, gui_font_xft.o(i.__draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __draw_char &rArr; Draw3DRect &rArr; gdDraw3DRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>__get_char_info</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, gui_font_xft.o(i.__get_char_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __get_char_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>__get_font_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_font_xft.o(i.__get_font_info))
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>__create_font</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gui_font_xft_ex.o(i.__create_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __create_font &rArr; GUI_MEM_Alloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft_ex.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>__delete_font</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_font_xft_ex.o(i.__delete_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __delete_font &rArr; GUI_MEM_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft_ex.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>__draw_char</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, gui_font_xft_ex.o(i.__draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __draw_char &rArr; Draw3DRect &rArr; gdDraw3DRect &rArr; gdHLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw3DRect
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xft_get_chr_entry_ex
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft_ex.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>__get_char_info</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gui_font_xft_ex.o(i.__get_char_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __get_char_info &rArr; xft_get_chr_info_ex
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xft_get_chr_info_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft_ex.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>__get_font_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_font_xft_ex.o(i.__get_font_info))
<BR>[Address Reference Count : 1]<UL><LI> gui_font_xft_ex.o(.constdata)
</UL>
<P><STRONG><a name="[2e1]"></a>_gdDrawCircle</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, gd_circle.o(i._gdDrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _gdDrawCircle &rArr; _gdSetPixel &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__InitCircle4
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__CaluCircle4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircle
</UL>

<P><STRONG><a name="[307]"></a>_FillRoundRect</STRONG> (Thumb, 314 bytes, Stack size 88 bytes, gd_rect.o(i._FillRoundRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _FillRoundRect &rArr; _gdFillRect &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__InitCircle4
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__CaluCircle4
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsEnableAA
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdFillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
</UL>

<P><STRONG><a name="[2e7]"></a>_gdFillRect</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, gd_rect.o(i._gdFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _gdFillRect &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LPtoDP
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableAlpha
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRoundRect
</UL>

<P><STRONG><a name="[bc]"></a>_AA_HLine</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, gui_aa_core.o(i._AA_HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _AA_HLine &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_aa_core.o(i.GUI_AA_Begin)
</UL>
<P><STRONG><a name="[316]"></a>_FlushLine</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, gui_aa_core.o(i._FlushLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRGB
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdHLine
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdSetPixelARGB
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_End
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AA_HLine
</UL>

<P><STRONG><a name="[32f]"></a>MouseEventHandler</STRONG> (Thumb, 630 bytes, Stack size 64 bytes, gui_input.o(i.MouseEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostCloseMessage
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToClient
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWindowEnabled
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEnableDragWindow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowLong
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindow
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInputHandler
</UL>

<P><STRONG><a name="[333]"></a>MouseInputHandler</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, gui_input.o(i.MouseInputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = MouseInputHandler &rArr; MouseEventHandler &rArr; SetForegroundWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTickCount
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseEventHandler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MouseInput
</UL>

<P><STRONG><a name="[340]"></a>_HideWindow</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, gui_window.o(i._HideWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsWindowVisible
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[317]"></a>_InitWindow</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, gui_window.o(i._InitWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _InitWindow &rArr; GUI_CreateMsgQ &rArr; GUI_SemCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCurThreadHandle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MutexCreate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_wstr_alloc
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateMsgQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateDesktop
</UL>

<P><STRONG><a name="[2ff]"></a>_InsertInvRect</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, gui_window.o(i._InsertInvRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _InsertInvRect &rArr; RGN_SubtractRect &rArr; GUI_RectLL_Alloc &rArr; GUI_MutexLock &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGN_SubtractRect
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RECT_LLAddRect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRectRgnIndirect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostPaintMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseDC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPaint
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
</UL>

<P><STRONG><a name="[354]"></a>_OffsetWindowRect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gui_window.o(i._OffsetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _OffsetWindowRect &rArr;  _OffsetWindowRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetRect
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
</UL>

<P><STRONG><a name="[33d]"></a>_RedrawWindow</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, gui_window.o(i._RedrawWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + In Cycle
<LI>Call Chain = _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsIntersectRect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PaintHandler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FlushHandler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostNCPaintMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
</UL>

<P><STRONG><a name="[356]"></a>_SendMessage_WM_MOVE_AllChild</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_window.o(i._SendMessage_WM_MOVE_AllChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = _SendMessage_WM_MOVE_AllChild &rArr;  _SendMessage_WM_MOVE_AllChild (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
</UL>

<P><STRONG><a name="[357]"></a>_SendMessage_WM_SIZE_AllChild</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_window.o(i._SendMessage_WM_SIZE_AllChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = _SendMessage_WM_SIZE_AllChild &rArr;  _SendMessage_WM_SIZE_AllChild (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
</UL>

<P><STRONG><a name="[33c]"></a>_SetWindowClipFlag</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gui_window.o(i._SetWindowClipFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = _SetWindowClipFlag &rArr;  _SetWindowClipFlag (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetForegroundWindow
</UL>

<P><STRONG><a name="[33e]"></a>_SetWindowPos</STRONG> (Thumb, 878 bytes, Stack size 184 bytes, gui_window.o(i._SetWindowPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = _SetWindowPos &rArr; _HideWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Unlock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIN_Lock
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetRect
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractRectEx
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRgn
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScreenToClient
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowToTop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindow
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRect
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowWindow
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowSize
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_SIZE_AllChild
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendMessage_WM_MOVE_AllChild
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OffsetWindowRect
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HideWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWindowPos
</UL>

<P><STRONG><a name="[352]"></a>_SetWindowSize</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gui_window.o(i._SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _SetWindowSize &rArr; InflateRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRectEx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientToScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitWindow
</UL>

<P><STRONG><a name="[33f]"></a>_ShowWindow</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_window.o(i._ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _ShowWindow &rArr; _RedrawWindow &rArr;  _RedrawWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowClipFlag
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RedrawWindow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowWindow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetWindowPos
</UL>

<P><STRONG><a name="[310]"></a>_CursorHide</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, gl_cursor.o(i._CursorHide))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowCursor
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetCursorPos
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorCheck
</UL>

<P><STRONG><a name="[311]"></a>_CursorShow</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_cursor.o(i._CursorShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _CursorShow &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_ShowCursor
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetCursorPos
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_CursorFix
</UL>

<P><STRONG><a name="[57]"></a>__copy_bits</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gl_ext_lcd_16bit.o(i.__copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __copy_bits &rArr; EXT_LCD_ReadBits &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[64]"></a>__draw_bitmap_AL1</STRONG> (Thumb, 538 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_AL1 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[65]"></a>__draw_bitmap_AL2</STRONG> (Thumb, 538 bytes, Stack size 80 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_AL2))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __draw_bitmap_AL2 &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[66]"></a>__draw_bitmap_AL4</STRONG> (Thumb, 316 bytes, Stack size 80 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_AL4))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __draw_bitmap_AL4 &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[67]"></a>__draw_bitmap_AL8</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __draw_bitmap_AL8 &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[5f]"></a>__draw_bitmap_ARGB1555</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_ARGB1555 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[60]"></a>__draw_bitmap_ARGB4444</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_ARGB4444))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __draw_bitmap_ARGB4444 &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[63]"></a>__draw_bitmap_ARGB8888</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __draw_bitmap_ARGB8888 &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[58]"></a>__draw_bitmap_LUT1</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __draw_bitmap_LUT1 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[59]"></a>__draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[5a]"></a>__draw_bitmap_LUT4</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_LUT4 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[5b]"></a>__draw_bitmap_LUT8</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_LUT8 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[5c]"></a>__draw_bitmap_RGB332</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_RGB332 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[5d]"></a>__draw_bitmap_RGB565</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __draw_bitmap_RGB565 &rArr; EXT_LCD_WriteBits &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[61]"></a>__draw_bitmap_RGB888</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_RGB888 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[5e]"></a>__draw_bitmap_XRGB1555</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_XRGB1555 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[62]"></a>__draw_bitmap_XRGB8888</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __draw_bitmap_XRGB8888 &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[53]"></a>__draw_hline</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gl_ext_lcd_16bit.o(i.__draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __draw_hline &rArr; EXT_LCD_FillRect &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[54]"></a>__draw_vline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_ext_lcd_16bit.o(i.__draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_vline &rArr; EXT_LCD_FillRect &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[55]"></a>__fill_rect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gl_ext_lcd_16bit.o(i.__fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __fill_rect &rArr; EXT_LCD_FillRect &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[56]"></a>__fill_rect_ARGB</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, gl_ext_lcd_16bit.o(i.__fill_rect_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __fill_rect_ARGB &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[50]"></a>__get_pixel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gl_ext_lcd_16bit.o(i.__get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __get_pixel &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadPixel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[69]"></a>__rotate_bitmap</STRONG> (Thumb, 1398 bytes, Stack size 208 bytes, gl_ext_lcd_16bit.o(i.__rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = __rotate_bitmap &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearXRGB8888ii
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearARGB8888ii
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[68]"></a>__scale_bitmap</STRONG> (Thumb, 764 bytes, Stack size 120 bytes, gl_ext_lcd_16bit.o(i.__scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = __scale_bitmap &rArr; __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteRGB
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearXRGB8888ii
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearARGB8888ii
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[4f]"></a>__set_pixel</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gl_ext_lcd_16bit.o(i.__set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __set_pixel &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[52]"></a>__set_pixel_ARGB</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, gl_ext_lcd_16bit.o(i.__set_pixel_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __set_pixel_ARGB &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadRGB
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect_ARGB
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL8
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[4e]"></a>__set_pos</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gl_ext_lcd_16bit.o(i.__set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __set_pos &rArr; EXT_LCD_WriteStart &rArr; __lcd_write_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[51]"></a>__xor_pixel</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gl_ext_lcd_16bit.o(i.__xor_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __xor_pixel &rArr; EXT_LCD_ReadStart &rArr; __lcd_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadPixel
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WritePixel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_ReadStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_LCD_WriteStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_ext_lcd_16bit.o(i.EXT_LCD_CreateSurfaceRGB565)
</UL>
<P><STRONG><a name="[303]"></a>GL_DrawArc</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, gd_arc.o(i.GL_DrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillArc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdDrawArc
</UL>

<P><STRONG><a name="[313]"></a>_DrawArc</STRONG> (Thumb, 624 bytes, Stack size 112 bytes, gd_arc.o(i._DrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArc
</UL>

<P><STRONG><a name="[d8]"></a>_GetARGB</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, surface_rgb565.o(i._GetARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetARGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>_GetRGB</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, surface_rgb565.o(i._GetRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _GetRGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>_MapARGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>_MapRGB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapRGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>_MapRGB332</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapRGB332))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>_MapRGB565</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapRGB565))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>_MapXRGB1555</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapXRGB1555))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>_MapXRGB4444</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapXRGB4444))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>_MapXRGB8888</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, surface_rgb565.o(i._MapXRGB8888))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>_ToARGB</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, surface_rgb565.o(i._ToARGB))
<BR>[Address Reference Count : 1]<UL><LI> surface_rgb565.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>DrawWindowNC</STRONG> (Thumb, 706 bytes, Stack size 80 bytes, gui_face.o(i.DrawWindowNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = DrawWindowNC &rArr; DrawRoundRect &rArr; _gdDrawArc &rArr; GL_DrawArc &rArr; _DrawArc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapRGB
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWindowRect
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRoundRect
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRoundRect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextColor
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBrushColor
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillRect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawTextEx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCloseBoxRect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCaptionRect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenToWindow
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetForegroundWindow
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AA_DrawBoldLine
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_window_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommFace_DrawWindowNC
</UL>

<P><STRONG><a name="[2f7]"></a>draw_window_frame</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, gui_face.o(i.draw_window_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = draw_window_frame &rArr; VLine &rArr; solid_line &rArr; FillPolygon &rArr; GUI_AA_End &rArr; _FlushLine &rArr; _gdHLine &rArr; CursorCheck &rArr; GL_CursorCheck &rArr; _CursorHide &rArr; _IntersectRect &rArr; _IsIntersectRect
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPenColor
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_Offset
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB32_AVG
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapXRGB8888
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflateRect
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawWindowNC
</UL>

<P><STRONG><a name="[360]"></a>__blend_argb</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, gl_mem_16bpp.o(i.__blend_argb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __blend_argb
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect_ARGB
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL8
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL2
</UL>

<P><STRONG><a name="[73]"></a>__copy_bits</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, gl_mem_16bpp.o(i.__copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __copy_bits &rArr; GPU_CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CopyBits
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[80]"></a>__draw_bitmap_AL1</STRONG> (Thumb, 270 bytes, Stack size 52 bytes, gl_mem_16bpp.o(i.__draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_bitmap_AL1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[81]"></a>__draw_bitmap_AL2</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_AL2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_AL2 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[82]"></a>__draw_bitmap_AL4</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_AL4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_AL4 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[83]"></a>__draw_bitmap_AL8</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_AL8 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[7b]"></a>__draw_bitmap_ARGB1555</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_ARGB1555 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[7c]"></a>__draw_bitmap_ARGB4444</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, gl_mem_16bpp.o(i.__draw_bitmap_ARGB4444))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __draw_bitmap_ARGB4444 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[7f]"></a>__draw_bitmap_ARGB8888</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_ARGB8888 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[74]"></a>__draw_bitmap_LUT1</STRONG> (Thumb, 278 bytes, Stack size 52 bytes, gl_mem_16bpp.o(i.__draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_bitmap_LUT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[75]"></a>__draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.__draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[76]"></a>__draw_bitmap_LUT4</STRONG> (Thumb, 130 bytes, Stack size 52 bytes, gl_mem_16bpp.o(i.__draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_bitmap_LUT4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[77]"></a>__draw_bitmap_LUT8</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gl_mem_16bpp.o(i.__draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __draw_bitmap_LUT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[78]"></a>__draw_bitmap_RGB332</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_RGB332 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[79]"></a>__draw_bitmap_RGB565</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_RGB565 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[7d]"></a>__draw_bitmap_RGB888</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_RGB888 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[7a]"></a>__draw_bitmap_XRGB1555</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_XRGB1555 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[7e]"></a>__draw_bitmap_XRGB8888</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_XRGB8888 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[6f]"></a>__draw_hline</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gl_mem_16bpp.o(i.__draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[70]"></a>__draw_vline</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gl_mem_16bpp.o(i.__draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __draw_vline &rArr; GUI_memset16_step
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[71]"></a>__fill_rect</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gl_mem_16bpp.o(i.__fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __fill_rect &rArr; GPU_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_FillRect
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[72]"></a>__fill_rect_ARGB</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, gl_mem_16bpp.o(i.__fill_rect_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __fill_rect_ARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_FillRectARGB
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[6c]"></a>__get_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.__get_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[85]"></a>__rotate_bitmap</STRONG> (Thumb, 1546 bytes, Stack size 208 bytes, gl_mem_16bpp.o(i.__rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = __rotate_bitmap &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearXRGB8888ii
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearARGB8888ii
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[84]"></a>__scale_bitmap</STRONG> (Thumb, 788 bytes, Stack size 112 bytes, gl_mem_16bpp.o(i.__scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __scale_bitmap &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ScaleBitmap
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearXRGB8888ii
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearARGB8888ii
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[6b]"></a>__set_pixel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.__set_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[6e]"></a>__set_pixel_ARGB</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gl_mem_16bpp.o(i.__set_pixel_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __set_pixel_ARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[6a]"></a>__set_pos</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.__set_pos))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[6d]"></a>__xor_pixel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gl_mem_16bpp.o(i.__xor_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_16bpp.o(i.GL_MEM_16BPP_Init)
</UL>
<P><STRONG><a name="[361]"></a>__blend_argb</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, gl_mem_32bpp.o(i.__blend_argb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __blend_argb
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_pixel_ARGB
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scale_bitmap
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rotate_bitmap
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fill_rect_ARGB
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB8888
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_ARGB4444
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL4
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__draw_bitmap_AL2
</UL>

<P><STRONG><a name="[8f]"></a>__copy_bits</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, gl_mem_32bpp.o(i.__copy_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __copy_bits &rArr; GPU_CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_CopyBits
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[9c]"></a>__draw_bitmap_AL1</STRONG> (Thumb, 268 bytes, Stack size 52 bytes, gl_mem_32bpp.o(i.__draw_bitmap_AL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_bitmap_AL1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[9d]"></a>__draw_bitmap_AL2</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_AL2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_AL2 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[9e]"></a>__draw_bitmap_AL4</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_AL4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_AL4 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[9f]"></a>__draw_bitmap_AL8</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_AL8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_AL8 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[97]"></a>__draw_bitmap_ARGB1555</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_ARGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_ARGB1555 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[98]"></a>__draw_bitmap_ARGB4444</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, gl_mem_32bpp.o(i.__draw_bitmap_ARGB4444))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __draw_bitmap_ARGB4444 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[9b]"></a>__draw_bitmap_ARGB8888</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_ARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __draw_bitmap_ARGB8888 &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[90]"></a>__draw_bitmap_LUT1</STRONG> (Thumb, 274 bytes, Stack size 52 bytes, gl_mem_32bpp.o(i.__draw_bitmap_LUT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_bitmap_LUT1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[91]"></a>__draw_bitmap_LUT2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.__draw_bitmap_LUT2))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[92]"></a>__draw_bitmap_LUT4</STRONG> (Thumb, 130 bytes, Stack size 52 bytes, gl_mem_32bpp.o(i.__draw_bitmap_LUT4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __draw_bitmap_LUT4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[93]"></a>__draw_bitmap_LUT8</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gl_mem_32bpp.o(i.__draw_bitmap_LUT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __draw_bitmap_LUT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[94]"></a>__draw_bitmap_RGB332</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_RGB332))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_RGB332 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[95]"></a>__draw_bitmap_RGB565</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_RGB565 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[99]"></a>__draw_bitmap_RGB888</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_RGB888))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_RGB888 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[96]"></a>__draw_bitmap_XRGB1555</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_XRGB1555))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_XRGB1555 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[9a]"></a>__draw_bitmap_XRGB8888</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__draw_bitmap_XRGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __draw_bitmap_XRGB8888 &rArr; GPU_DrawBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[8b]"></a>__draw_hline</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gl_mem_32bpp.o(i.__draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __draw_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[8c]"></a>__draw_vline</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gl_mem_32bpp.o(i.__draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __draw_vline &rArr; GUI_memset32_step
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset32_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[8d]"></a>__fill_rect</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gl_mem_32bpp.o(i.__fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __fill_rect &rArr; GPU_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_FillRect
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_memset32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[8e]"></a>__fill_rect_ARGB</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, gl_mem_32bpp.o(i.__fill_rect_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __fill_rect_ARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_FillRectARGB
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[88]"></a>__get_pixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.__get_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[a1]"></a>__rotate_bitmap</STRONG> (Thumb, 1544 bytes, Stack size 208 bytes, gl_mem_32bpp.o(i.__rotate_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = __rotate_bitmap &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DrawBitmap
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARGB4444_GetARGB
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearXRGB8888ii
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearARGB8888ii
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[a0]"></a>__scale_bitmap</STRONG> (Thumb, 810 bytes, Stack size 112 bytes, gl_mem_32bpp.o(i.__scale_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __scale_bitmap &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ScaleBitmap
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearXRGB8888ii
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MakeBilinearARGB8888ii
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[87]"></a>__set_pixel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.__set_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[8a]"></a>__set_pixel_ARGB</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gl_mem_32bpp.o(i.__set_pixel_ARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __set_pixel_ARGB &rArr; __blend_argb
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__blend_argb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[86]"></a>__set_pos</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.__set_pos))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[89]"></a>__xor_pixel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gl_mem_32bpp.o(i.__xor_pixel))
<BR>[Address Reference Count : 1]<UL><LI> gl_mem_32bpp.o(i.GL_MEM_32BPP_Init)
</UL>
<P><STRONG><a name="[35d]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
